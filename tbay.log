(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'bknowles', 'password': 'uhuohohohohonana'}
COMMIT
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'uhuohohohohonana', 'username': 'bknowles'}
COMMIT
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'steve'}
COMMIT
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users
{}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 0}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 2}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 3}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 4}
SELECT users.username AS users_username 
FROM users
{}
SELECT users.username AS users_username 
FROM users ORDER BY users.username
{}
SELECT users.username AS users_username 
FROM users ORDER BY users.username 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY users.username
{}
SELECT items.description AS items_description 
FROM items 
WHERE items.name = %(name_1)s
{'name_1': 'baseball'}
INSERT INTO items (name, description, start_time) VALUES (%(name)s, %(description)s, %(start_time)s) RETURNING items.id
{'description': "It's a friggin' baseball yo", 'start_time': datetime.datetime(2017, 7, 12, 3, 46, 40, 928586), 'name': 'baseball'}
COMMIT
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO items (name, description, start_time) VALUES (%(name)s, %(description)s, %(start_time)s) RETURNING items.id
{'description': 'A much better type of ball', 'start_time': datetime.datetime(2017, 7, 12, 3, 47, 54, 694364), 'name': 'Basketball'}
COMMIT
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
BEGIN (implicit)
SELECT items.description AS items_description 
FROM items 
WHERE items.name = %(name_1)s
{'name_1': 'baseball'}
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users
{}
SELECT users.username AS users_username 
FROM users
{}
SELECT users.username AS users_username, users.password AS users_password 
FROM users
{}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
UPDATE users SET username=%(username)s WHERE users.id = %(users_id)s
{'users_id': 1, 'username': 'solange'}
COMMIT
BEGIN (implicit)
SELECT users.username AS users_username 
FROM users
{}
SELECT users.username AS users_username 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, users.password AS users_password 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, users.password AS users_password 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, users.password AS users_password 
FROM users
{}
SELECT items.name AS items_name 
FROM items 
WHERE items.name = %(name_1)s
{'name_1': 'Baseball'}
SELECT items.name AS items_name 
FROM items 
WHERE items.name = %(name_1)s
{'name_1': 'baseball'}
SELECT items.name AS items_name 
FROM items 
WHERE items.name = %(name_1)s
{'name_1': 'baseball'}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time 
FROM items 
WHERE items.name = %(name_1)s
{'name_1': 'baseball'}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time 
FROM items 
WHERE items.name = %(name_1)s
{'name_1': 'baseball'}
UPDATE items SET name=%(name)s WHERE items.id = %(items_id)s
{'name': 'football', 'items_id': 1}
COMMIT
BEGIN (implicit)
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time 
FROM items 
WHERE items.name = %(name_1)s
{'name_1': 'baseball'}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time 
FROM items 
WHERE items.name = %(name_1)s
{'name_1': 'football'}
UPDATE items SET description=%(description)s WHERE items.id = %(items_id)s
{'items_id': 1, 'description': 'A ball made out of feet'}
COMMIT
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
DELETE FROM users WHERE users.id = %(id)s
{'id': 2}
COMMIT
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users
{}
DELETE FROM users WHERE users.id = %(id)s
({'id': 1}, {'id': 3})
COMMIT
BEGIN (implicit)
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time 
FROM items
{}
DELETE FROM items WHERE items.id = %(id)s
({'id': 1}, {'id': 2})
COMMIT
(Person|person) _configure_property(passport, RelationshipProperty)
(Person|person) _configure_property(id, Column)
(Person|person) _configure_property(name, Column)
(Person|person) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<person>, primary_key=True, nullable=False)])
(Person|person) constructed
(Passport|passport) _configure_property(id, Column)
(Passport|passport) _configure_property(issue_date, Column)
(Passport|passport) _configure_property(owner_id, Column)
(Passport|passport) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<passport>, primary_key=True, nullable=False)])
(Passport|passport) constructed
(Passport|passport) _post_configure_properties() started
(Passport|passport) initialize prop id
(Passport|passport) initialize prop issue_date
(Passport|passport) initialize prop owner_id
(Passport|passport) _post_configure_properties() complete
(Person|person) _post_configure_properties() started
(Person|person) initialize prop passport
Person.passport setup primary join person.id = passport.owner_id
Person.passport setup secondary join None
Person.passport synchronize pairs [(person.id => passport.owner_id)]
Person.passport secondary synchronize pairs []
Person.passport local/remote pairs [(person.id / passport.owner_id)]
Person.passport remote columns [passport.owner_id]
Person.passport local columns [person.id]
Person.passport relationship direction symbol('ONETOMANY')
(Passport|passport) _configure_property(owner, RelationshipProperty)
Passport.owner setup primary join person.id = passport.owner_id
Passport.owner setup secondary join None
Passport.owner synchronize pairs [(person.id => passport.owner_id)]
Passport.owner secondary synchronize pairs []
Passport.owner local/remote pairs [(passport.owner_id / person.id)]
Passport.owner remote columns [person.id]
Passport.owner local columns [passport.owner_id]
Passport.owner relationship direction symbol('MANYTOONE')
Passport.owner lazy loading clause person.id = :param_1
Passport.owner will use query.get() to optimize instance loads
Passport.owner lazy loading clause person.id = :param_1
Passport.owner will use query.get() to optimize instance loads
Person.passport lazy loading clause :param_1 = passport.owner_id
Person.passport lazy loading clause :param_1 = passport.owner_id
(Person|person) initialize prop id
(Person|person) initialize prop name
(Person|person) _post_configure_properties() complete
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
BEGIN (implicit)
INSERT INTO person (name) VALUES (%(name)s) RETURNING person.id
{'name': 'Beyonce Knowles'}
ROLLBACK
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bid_user_item_association'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}

CREATE TABLE users (
	id SERIAL NOT NULL, 
	username VARCHAR NOT NULL, 
	password VARCHAR NOT NULL, 
	PRIMARY KEY (id)
)


{}
COMMIT

CREATE TABLE items (
	id SERIAL NOT NULL, 
	name VARCHAR NOT NULL, 
	description VARCHAR, 
	start_time TIMESTAMP WITHOUT TIME ZONE, 
	user_id INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
)


{}
COMMIT

CREATE TABLE bid_user_item_association (
	id SERIAL NOT NULL, 
	price FLOAT NOT NULL, 
	user_id INTEGER, 
	item_id INTEGER, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(item_id) REFERENCES items (id)
)


{}
COMMIT
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bid_user_item_association'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = bid_user_item_association.user_id
User.items setup secondary join items.id = bid_user_item_association.item_id
User.items synchronize pairs [(users.id => bid_user_item_association.user_id)]
User.items secondary synchronize pairs [(items.id => bid_user_item_association.item_id)]
User.items local/remote pairs [(users.id / bid_user_item_association.user_id),(items.id / bid_user_item_association.item_id)]
User.items remote columns [bid_user_item_association.item_id,bid_user_item_association.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('MANYTOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join items.id = bid_user_item_association.item_id
Item.users setup secondary join users.id = bid_user_item_association.user_id
Item.users synchronize pairs [(items.id => bid_user_item_association.item_id)]
Item.users secondary synchronize pairs [(users.id => bid_user_item_association.user_id)]
Item.users local/remote pairs [(items.id / bid_user_item_association.item_id),(users.id / bid_user_item_association.user_id)]
Item.users remote columns [bid_user_item_association.item_id,bid_user_item_association.user_id]
Item.users local columns [items.id]
Item.users relationship direction symbol('MANYTOMANY')
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'description': "A friggin' basketball", 'user_id': None, 'start_time': datetime.datetime(2017, 7, 13, 17, 43, 11, 63339)}
ROLLBACK
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bid_user_item_association'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = bid_user_item_association.user_id
User.items setup secondary join items.id = bid_user_item_association.item_id
User.items synchronize pairs [(users.id => bid_user_item_association.user_id)]
User.items secondary synchronize pairs [(items.id => bid_user_item_association.item_id)]
User.items local/remote pairs [(users.id / bid_user_item_association.user_id),(items.id / bid_user_item_association.item_id)]
User.items remote columns [bid_user_item_association.user_id,bid_user_item_association.item_id]
User.items local columns [users.id]
User.items relationship direction symbol('MANYTOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join items.id = bid_user_item_association.item_id
Item.users setup secondary join users.id = bid_user_item_association.user_id
Item.users synchronize pairs [(items.id => bid_user_item_association.item_id)]
Item.users secondary synchronize pairs [(users.id => bid_user_item_association.user_id)]
Item.users local/remote pairs [(items.id / bid_user_item_association.item_id),(users.id / bid_user_item_association.user_id)]
Item.users remote columns [bid_user_item_association.user_id,bid_user_item_association.item_id]
Item.users local columns [items.id]
Item.users relationship direction symbol('MANYTOMANY')
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bid_user_item_association'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = bid_user_item_association.user_id
User.items setup secondary join items.id = bid_user_item_association.item_id
User.items synchronize pairs [(users.id => bid_user_item_association.user_id)]
User.items secondary synchronize pairs [(items.id => bid_user_item_association.item_id)]
User.items local/remote pairs [(users.id / bid_user_item_association.user_id),(items.id / bid_user_item_association.item_id)]
User.items remote columns [bid_user_item_association.user_id,bid_user_item_association.item_id]
User.items local columns [users.id]
User.items relationship direction symbol('MANYTOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join items.id = bid_user_item_association.item_id
Item.users setup secondary join users.id = bid_user_item_association.user_id
Item.users synchronize pairs [(items.id => bid_user_item_association.item_id)]
Item.users secondary synchronize pairs [(users.id => bid_user_item_association.user_id)]
Item.users local/remote pairs [(items.id / bid_user_item_association.item_id),(users.id / bid_user_item_association.user_id)]
Item.users remote columns [bid_user_item_association.user_id,bid_user_item_association.item_id]
Item.users local columns [items.id]
Item.users relationship direction symbol('MANYTOMANY')
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bid_user_item_association'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = bid_user_item_association.user_id
User.items setup secondary join items.id = bid_user_item_association.item_id
User.items synchronize pairs [(users.id => bid_user_item_association.user_id)]
User.items secondary synchronize pairs [(items.id => bid_user_item_association.item_id)]
User.items local/remote pairs [(users.id / bid_user_item_association.user_id),(items.id / bid_user_item_association.item_id)]
User.items remote columns [bid_user_item_association.item_id,bid_user_item_association.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('MANYTOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join items.id = bid_user_item_association.item_id
Item.users setup secondary join users.id = bid_user_item_association.user_id
Item.users synchronize pairs [(items.id => bid_user_item_association.item_id)]
Item.users secondary synchronize pairs [(users.id => bid_user_item_association.user_id)]
Item.users local/remote pairs [(items.id / bid_user_item_association.item_id),(users.id / bid_user_item_association.user_id)]
Item.users remote columns [bid_user_item_association.item_id,bid_user_item_association.user_id]
Item.users local columns [items.id]
Item.users relationship direction symbol('MANYTOMANY')
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bid_user_item_association'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = bid_user_item_association.user_id
User.items setup secondary join items.id = bid_user_item_association.item_id
User.items synchronize pairs [(users.id => bid_user_item_association.user_id)]
User.items secondary synchronize pairs [(items.id => bid_user_item_association.item_id)]
User.items local/remote pairs [(users.id / bid_user_item_association.user_id),(items.id / bid_user_item_association.item_id)]
User.items remote columns [bid_user_item_association.user_id,bid_user_item_association.item_id]
User.items local columns [users.id]
User.items relationship direction symbol('MANYTOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join items.id = bid_user_item_association.item_id
Item.users setup secondary join users.id = bid_user_item_association.user_id
Item.users synchronize pairs [(items.id => bid_user_item_association.item_id)]
Item.users secondary synchronize pairs [(users.id => bid_user_item_association.user_id)]
Item.users local/remote pairs [(items.id / bid_user_item_association.item_id),(users.id / bid_user_item_association.user_id)]
Item.users remote columns [bid_user_item_association.user_id,bid_user_item_association.item_id]
Item.users local columns [items.id]
Item.users relationship direction symbol('MANYTOMANY')
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bid_user_item_association'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = bid_user_item_association.user_id
User.items setup secondary join items.id = bid_user_item_association.item_id
User.items synchronize pairs [(users.id => bid_user_item_association.user_id)]
User.items secondary synchronize pairs [(items.id => bid_user_item_association.item_id)]
User.items local/remote pairs [(users.id / bid_user_item_association.user_id),(items.id / bid_user_item_association.item_id)]
User.items remote columns [bid_user_item_association.user_id,bid_user_item_association.item_id]
User.items local columns [users.id]
User.items relationship direction symbol('MANYTOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join items.id = bid_user_item_association.item_id
Item.users setup secondary join users.id = bid_user_item_association.user_id
Item.users synchronize pairs [(items.id => bid_user_item_association.item_id)]
Item.users secondary synchronize pairs [(users.id => bid_user_item_association.user_id)]
Item.users local/remote pairs [(items.id / bid_user_item_association.item_id),(users.id / bid_user_item_association.user_id)]
Item.users remote columns [bid_user_item_association.user_id,bid_user_item_association.item_id]
Item.users local columns [items.id]
Item.users relationship direction symbol('MANYTOMANY')
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bid_user_item_association'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = bid_user_item_association.user_id
User.items setup secondary join items.id = bid_user_item_association.item_id
User.items synchronize pairs [(users.id => bid_user_item_association.user_id)]
User.items secondary synchronize pairs [(items.id => bid_user_item_association.item_id)]
User.items local/remote pairs [(users.id / bid_user_item_association.user_id),(items.id / bid_user_item_association.item_id)]
User.items remote columns [bid_user_item_association.user_id,bid_user_item_association.item_id]
User.items local columns [users.id]
User.items relationship direction symbol('MANYTOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join items.id = bid_user_item_association.item_id
Item.users setup secondary join users.id = bid_user_item_association.user_id
Item.users synchronize pairs [(items.id => bid_user_item_association.item_id)]
Item.users secondary synchronize pairs [(users.id => bid_user_item_association.user_id)]
Item.users local/remote pairs [(items.id / bid_user_item_association.item_id),(users.id / bid_user_item_association.user_id)]
Item.users remote columns [bid_user_item_association.user_id,bid_user_item_association.item_id]
Item.users local columns [items.id]
Item.users relationship direction symbol('MANYTOMANY')
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
Item.users lazy loading clause :param_1 = bid_user_item_association.item_id AND users.id = bid_user_item_association.user_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
User.items lazy loading clause :param_1 = bid_user_item_association.user_id AND items.id = bid_user_item_association.item_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 17, 48, 49, 432909), 'description': "A friggin' basketball", 'user_id': 1, 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 17, 48, 49, 434740), 'description': "A friggin' football", 'user_id': 2, 'name': 'Football'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 17, 48, 49, 435437), 'description': "A friggin' baseball", 'user_id': 3, 'name': 'Baseball'}
COMMIT
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}

CREATE TABLE bids (
	id SERIAL NOT NULL, 
	price FLOAT NOT NULL, 
	user_id INTEGER NOT NULL, 
	item_id INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(item_id) REFERENCES items (id)
)


{}
COMMIT
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = bids.user_id
User.items setup secondary join items.id = bids.item_id
User.items synchronize pairs [(users.id => bids.user_id)]
User.items secondary synchronize pairs [(items.id => bids.item_id)]
User.items local/remote pairs [(users.id / bids.user_id),(items.id / bids.item_id)]
User.items remote columns [bids.item_id,bids.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('MANYTOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join items.id = bids.item_id
Item.users setup secondary join users.id = bids.user_id
Item.users synchronize pairs [(items.id => bids.item_id)]
Item.users secondary synchronize pairs [(users.id => bids.user_id)]
Item.users local/remote pairs [(items.id / bids.item_id),(users.id / bids.user_id)]
Item.users remote columns [bids.item_id,bids.user_id]
Item.users local columns [items.id]
Item.users relationship direction symbol('MANYTOMANY')
Item.users lazy loading clause :param_1 = bids.item_id AND users.id = bids.user_id
Item.users lazy loading clause :param_1 = bids.item_id AND users.id = bids.user_id
User.items lazy loading clause :param_1 = bids.user_id AND items.id = bids.item_id
User.items lazy loading clause :param_1 = bids.user_id AND items.id = bids.item_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 4, 'name': 'Basketball', 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 5, 31, 545547)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 5, 'name': 'Football', 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 5, 31, 547454)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 6, 'name': 'Baseball', 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 5, 31, 548322)}
COMMIT
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}

CREATE TABLE users (
	id SERIAL NOT NULL, 
	username VARCHAR NOT NULL, 
	password VARCHAR NOT NULL, 
	PRIMARY KEY (id)
)


{}
COMMIT

CREATE TABLE items (
	id SERIAL NOT NULL, 
	name VARCHAR NOT NULL, 
	description VARCHAR, 
	start_time TIMESTAMP WITHOUT TIME ZONE, 
	user_id INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
)


{}
COMMIT

CREATE TABLE bids (
	id SERIAL NOT NULL, 
	price FLOAT NOT NULL, 
	user_id INTEGER NOT NULL, 
	item_id INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(item_id) REFERENCES items (id)
)


{}
COMMIT
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 11, 54, 136664), 'user_id': 1, 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 11, 54, 138576), 'user_id': 2, 'name': 'Football'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 11, 54, 139622), 'user_id': 3, 'name': 'Baseball'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 1, 'user_id': None, 'price': 5}
ROLLBACK
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
(Bid|bids) constructed
select version()
select version()
{}
{}
select current_schema()
select current_schema()
{}
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
{}
show standard_conforming_strings
show standard_conforming_strings
{}
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
{'name': 'items'}
(Bid|bids) _post_configure_properties() started
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop item_id
(Bid|bids) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) _post_configure_properties() started
(User|users) initialize prop items
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(User|users) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 15, 13, 679532), 'name': 'Basketball', 'description': "A friggin' basketball", 'user_id': 4}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 15, 13, 681104), 'name': 'Football', 'description': "A friggin' football", 'user_id': 5}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 15, 13, 681792), 'name': 'Baseball', 'description': "A friggin' baseball", 'user_id': 6}
COMMIT
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = bids.user_id
User.items setup secondary join items.id = bids.item_id
User.items synchronize pairs [(users.id => bids.user_id)]
User.items secondary synchronize pairs [(items.id => bids.item_id)]
User.items local/remote pairs [(users.id / bids.user_id),(items.id / bids.item_id)]
User.items remote columns [bids.item_id,bids.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('MANYTOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join items.id = bids.item_id
Item.users setup secondary join users.id = bids.user_id
Item.users synchronize pairs [(items.id => bids.item_id)]
Item.users secondary synchronize pairs [(users.id => bids.user_id)]
Item.users local/remote pairs [(items.id / bids.item_id),(users.id / bids.user_id)]
Item.users remote columns [bids.item_id,bids.user_id]
Item.users local columns [items.id]
Item.users relationship direction symbol('MANYTOMANY')
Item.users lazy loading clause :param_1 = bids.item_id AND users.id = bids.user_id
Item.users lazy loading clause :param_1 = bids.item_id AND users.id = bids.user_id
User.items lazy loading clause :param_1 = bids.user_id AND items.id = bids.item_id
User.items lazy loading clause :param_1 = bids.user_id AND items.id = bids.item_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(users, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop users
User.users setup primary join users.id = bids.user_id
User.users setup secondary join None
User.users synchronize pairs [(users.id => bids.user_id)]
User.users secondary synchronize pairs []
User.users local/remote pairs [(users.id / bids.user_id)]
User.users remote columns [bids.user_id]
User.users local columns [users.id]
User.users relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.users lazy loading clause :param_1 = bids.user_id
User.users lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 18, 45, 213454), 'user_id': 7, 'name': 'Basketball', 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 18, 45, 215000), 'user_id': 8, 'name': 'Baseball', 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 18, 45, 215654), 'user_id': 9, 'name': 'Football', 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 8, 'item_id': 7}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 8, 'item_id': 9}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'user_id': 9, 'item_id': 7}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'user_id': 8, 'item_id': 7}
COMMIT
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(users, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}

CREATE TABLE users (
	id SERIAL NOT NULL, 
	username VARCHAR NOT NULL, 
	password VARCHAR NOT NULL, 
	PRIMARY KEY (id)
)


{}
COMMIT

CREATE TABLE items (
	id SERIAL NOT NULL, 
	name VARCHAR NOT NULL, 
	description VARCHAR, 
	start_time TIMESTAMP WITHOUT TIME ZONE, 
	user_id INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
)


{}
COMMIT

CREATE TABLE bids (
	id SERIAL NOT NULL, 
	price FLOAT NOT NULL, 
	user_id INTEGER NOT NULL, 
	item_id INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(item_id) REFERENCES items (id)
)


{}
COMMIT
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop users
User.users setup primary join users.id = bids.user_id
User.users setup secondary join None
User.users synchronize pairs [(users.id => bids.user_id)]
User.users secondary synchronize pairs []
User.users local/remote pairs [(users.id / bids.user_id)]
User.users remote columns [bids.user_id]
User.users local columns [users.id]
User.users relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.users lazy loading clause :param_1 = bids.user_id
User.users lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 20, 34, 445062), 'description': "A friggin' basketball", 'user_id': 1}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 20, 34, 446667), 'description': "A friggin' baseball", 'user_id': 2}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 20, 34, 447488), 'description': "A friggin' football", 'user_id': 3}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 1, 'price': 5, 'user_id': 2}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 3, 'price': 5, 'user_id': 2}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 1, 'price': 6, 'user_id': 3}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 1, 'price': 7, 'user_id': 2}
COMMIT
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}

CREATE TABLE users (
	id SERIAL NOT NULL, 
	username VARCHAR NOT NULL, 
	password VARCHAR NOT NULL, 
	PRIMARY KEY (id)
)


{}
COMMIT

CREATE TABLE items (
	id SERIAL NOT NULL, 
	name VARCHAR NOT NULL, 
	description VARCHAR, 
	start_time TIMESTAMP WITHOUT TIME ZONE, 
	user_id INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
)


{}
COMMIT

CREATE TABLE bids (
	id SERIAL NOT NULL, 
	price FLOAT NOT NULL, 
	user_id INTEGER NOT NULL, 
	item_id INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(item_id) REFERENCES items (id)
)


{}
COMMIT
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 22, 33, 75422), 'name': 'Basketball', 'description': "A friggin' basketball", 'user_id': 1}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 22, 33, 76846), 'name': 'Baseball', 'description': "A friggin' baseball", 'user_id': 2}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 22, 33, 77548), 'name': 'Football', 'description': "A friggin' football", 'user_id': 3}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 1, 'user_id': 2}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 3, 'user_id': 2}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'item_id': 1, 'user_id': 3}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'item_id': 1, 'user_id': 2}
COMMIT
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 24, 32, 425250), 'description': "A friggin' basketball", 'user_id': 4, 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 24, 32, 426860), 'description': "A friggin' baseball", 'user_id': 5, 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 24, 32, 427542), 'description': "A friggin' football", 'user_id': 6, 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 4, 'price': 5, 'user_id': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 6, 'price': 5, 'user_id': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 4, 'price': 6, 'user_id': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 4, 'price': 7, 'user_id': 5}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 4}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 6}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 5}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 4}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 6}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 5}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 4}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 6}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 5}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 4}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 5}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 6}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'user_id': 7, 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 24, 57, 135726)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'user_id': 8, 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 24, 57, 138072)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'user_id': 9, 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 24, 57, 139256)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 8, 'price': 5, 'item_id': 7}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 8, 'price': 5, 'item_id': 9}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 9, 'price': 6, 'item_id': 7}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 8, 'price': 7, 'item_id': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 7}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 9}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 8}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 7}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 10, 'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 25, 44, 947257), 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 11, 'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 25, 44, 949229), 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 12, 'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 25, 44, 950161), 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 11, 'price': 5, 'item_id': 10}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 11, 'price': 5, 'item_id': 12}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 12, 'price': 6, 'item_id': 10}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 11, 'price': 7, 'item_id': 10}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 10}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 12}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 11}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 10}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 13, 'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 25, 51, 424372), 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 14, 'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 25, 51, 426080), 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 15, 'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 25, 51, 426797), 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 13, 'user_id': 14}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 15, 'user_id': 14}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'item_id': 13, 'user_id': 15}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'item_id': 13, 'user_id': 14}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 13}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 15}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 14}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 13}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 15}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 14}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 13}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 15}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 14}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 13}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 14}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 15}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 26, 45, 930356), 'user_id': 16, 'description': "A friggin' basketball", 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 26, 45, 932107), 'user_id': 17, 'description': "A friggin' baseball", 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 26, 45, 932922), 'user_id': 18, 'description': "A friggin' football", 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 16, 'user_id': 17, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 18, 'user_id': 17, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 16, 'user_id': 18, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 16, 'user_id': 17, 'price': 7}
COMMIT
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 26, 58, 237857), 'description': "A friggin' basketball", 'name': 'Basketball', 'user_id': 19}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 26, 58, 239379), 'description': "A friggin' baseball", 'name': 'Baseball', 'user_id': 20}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 26, 58, 240173), 'description': "A friggin' football", 'name': 'Football', 'user_id': 21}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 19, 'price': 5, 'user_id': 20}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 21, 'price': 5, 'user_id': 20}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 19, 'price': 6, 'user_id': 21}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 19, 'price': 7, 'user_id': 20}
COMMIT
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 7, 720130), 'description': "A friggin' basketball", 'user_id': 22}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 7, 721691), 'description': "A friggin' baseball", 'user_id': 23}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 7, 722413), 'description': "A friggin' football", 'user_id': 24}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 23, 'item_id': 22, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 23, 'item_id': 24, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 24, 'item_id': 22, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 23, 'item_id': 22, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 22}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 22}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 25, 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 13, 768825), 'description': "A friggin' basketball", 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 26, 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 13, 770391), 'description': "A friggin' baseball", 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 27, 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 13, 771094), 'description': "A friggin' football", 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 25, 'user_id': 26}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 27, 'user_id': 26}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'item_id': 25, 'user_id': 27}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'item_id': 25, 'user_id': 26}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 25}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 25}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 28, 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 35, 30175), 'name': 'Basketball', 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 29, 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 35, 31804), 'name': 'Baseball', 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 30, 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 35, 32625), 'name': 'Football', 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 29, 'item_id': 28, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 29, 'item_id': 30, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 30, 'item_id': 28, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 29, 'item_id': 28, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 28}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 28}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 30}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 30}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 29}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 29}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 28}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 30}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 29}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 28}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 29}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 30}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'name': 'Basketball', 'user_id': 31, 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 59, 748043)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'name': 'Baseball', 'user_id': 32, 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 59, 749657)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'name': 'Football', 'user_id': 33, 'start_time': datetime.datetime(2017, 7, 13, 18, 27, 59, 750335)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 31, 'user_id': 32, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 33, 'user_id': 32, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 31, 'user_id': 33, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 31, 'user_id': 32, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 31}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 31}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 33}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 33}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 32}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 32}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 31}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 33}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 32}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 31}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 32}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 33}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 34, 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 28, 16, 216343), 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 35, 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 28, 16, 217841), 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 36, 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 28, 16, 218478), 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 35, 'item_id': 34}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 35, 'item_id': 36}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'user_id': 36, 'item_id': 34}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'user_id': 35, 'item_id': 34}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 34}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 34}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 36}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 36}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 35}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 35}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'user_id': 37, 'start_time': datetime.datetime(2017, 7, 13, 18, 28, 29, 850689), 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'user_id': 38, 'start_time': datetime.datetime(2017, 7, 13, 18, 28, 29, 852498), 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'user_id': 39, 'start_time': datetime.datetime(2017, 7, 13, 18, 28, 29, 853578), 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 37, 'price': 5, 'user_id': 38}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 39, 'price': 5, 'user_id': 38}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 37, 'price': 6, 'user_id': 39}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 37, 'price': 7, 'user_id': 38}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 37}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 37}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 39}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 39}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 38}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 38}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'user_id': 40, 'start_time': datetime.datetime(2017, 7, 13, 18, 28, 59, 740762), 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'user_id': 41, 'start_time': datetime.datetime(2017, 7, 13, 18, 28, 59, 742822), 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'user_id': 42, 'start_time': datetime.datetime(2017, 7, 13, 18, 28, 59, 743795), 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 41, 'item_id': 40, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 41, 'item_id': 42, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 42, 'item_id': 40, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 41, 'item_id': 40, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 40}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 40}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 34, 28, 899076), 'description': "A friggin' basketball", 'name': 'Basketball', 'user_id': 43}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 34, 28, 900546), 'description': "A friggin' baseball", 'name': 'Baseball', 'user_id': 44}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 34, 28, 901259), 'description': "A friggin' football", 'name': 'Football', 'user_id': 45}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 44, 'item_id': 43, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 44, 'item_id': 45, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 45, 'item_id': 43, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 44, 'item_id': 43, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 43}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 43}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
(Bid|bids) constructed
select version()
select version()
{}
{}
select current_schema()
select current_schema()
{}
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
{}
show standard_conforming_strings
show standard_conforming_strings
{}
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) _post_configure_properties() started
(User|users) initialize prop items
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 34, 40, 162029), 'description': "A friggin' basketball", 'name': 'Basketball', 'user_id': 46}
{'start_time': datetime.datetime(2017, 7, 13, 18, 34, 40, 162029), 'description': "A friggin' basketball", 'name': 'Basketball', 'user_id': 46}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 34, 40, 163677), 'description': "A friggin' baseball", 'name': 'Baseball', 'user_id': 47}
{'start_time': datetime.datetime(2017, 7, 13, 18, 34, 40, 163677), 'description': "A friggin' baseball", 'name': 'Baseball', 'user_id': 47}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 34, 40, 164429), 'description': "A friggin' football", 'name': 'Football', 'user_id': 48}
{'start_time': datetime.datetime(2017, 7, 13, 18, 34, 40, 164429), 'description': "A friggin' football", 'name': 'Football', 'user_id': 48}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 47, 'item_id': 46, 'price': 5}
{'user_id': 47, 'item_id': 46, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 47, 'item_id': 48, 'price': 5}
{'user_id': 47, 'item_id': 48, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 48, 'item_id': 46, 'price': 6}
{'user_id': 48, 'item_id': 46, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 47, 'item_id': 46, 'price': 7}
{'user_id': 47, 'item_id': 46, 'price': 7}
COMMIT
COMMIT
BEGIN (implicit)
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 48}
{'param_1': 48}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 48}
{'param_1': 48}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 36, 33, 983529), 'user_id': 49, 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 36, 33, 985137), 'user_id': 50, 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 36, 33, 985817), 'user_id': 51, 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 49, 'user_id': 50}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 51, 'user_id': 50}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'item_id': 49, 'user_id': 51}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'item_id': 49, 'user_id': 50}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 49}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 49}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 51}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 51}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 50}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 50}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 36, 50, 480390), 'user_id': 52, 'name': 'Basketball', 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 36, 50, 482206), 'user_id': 53, 'name': 'Baseball', 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 36, 50, 483028), 'user_id': 54, 'name': 'Football', 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 53, 'item_id': 52}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 53, 'item_id': 54}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'user_id': 54, 'item_id': 52}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'user_id': 53, 'item_id': 52}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 52}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 52}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 54}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 54}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 53}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 53}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 55, 'start_time': datetime.datetime(2017, 7, 13, 18, 38, 13, 923482), 'name': 'Basketball', 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 56, 'start_time': datetime.datetime(2017, 7, 13, 18, 38, 13, 925018), 'name': 'Baseball', 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 57, 'start_time': datetime.datetime(2017, 7, 13, 18, 38, 13, 925688), 'name': 'Football', 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 56, 'price': 5, 'item_id': 55}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 56, 'price': 5, 'item_id': 57}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 57, 'price': 6, 'item_id': 55}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 56, 'price': 7, 'item_id': 55}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 55}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 55}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 57}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 57}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 56}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 56}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 55}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 57}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'user_id': 58, 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 39, 9, 616790)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'user_id': 59, 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 39, 9, 618545)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'user_id': 60, 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 39, 9, 619459)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 59, 'item_id': 58, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 59, 'item_id': 60, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 60, 'item_id': 58, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 59, 'item_id': 58, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 58}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 58}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 60}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 60}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 59}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 59}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 58}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 60}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 59}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 41, 13, 616587), 'user_id': 61}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 41, 13, 618291), 'user_id': 62}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 41, 13, 619117), 'user_id': 63}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 61, 'user_id': 62}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 63, 'user_id': 62}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'item_id': 61, 'user_id': 63}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'item_id': 61, 'user_id': 62}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 61}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 61}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 63}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 63}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 62}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 62}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 61}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 63}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 41, 18, 849956), 'description': "A friggin' basketball", 'user_id': 64}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 41, 18, 851655), 'description': "A friggin' baseball", 'user_id': 65}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 41, 18, 852439), 'description': "A friggin' football", 'user_id': 66}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 64, 'user_id': 65}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 66, 'user_id': 65}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'item_id': 64, 'user_id': 66}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'item_id': 64, 'user_id': 65}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 64}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 64}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 66}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 66}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 65}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 65}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 64}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 66}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 65}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 67, 'description': "A friggin' basketball", 'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 41, 27, 979868)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 68, 'description': "A friggin' baseball", 'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 41, 27, 981405)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 69, 'description': "A friggin' football", 'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 41, 27, 982098)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 68, 'item_id': 67, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 68, 'item_id': 69, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 69, 'item_id': 67, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 68, 'item_id': 67, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 67}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 67}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 69}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 69}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 68}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 68}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 67}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 69}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 68}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 70, 'start_time': datetime.datetime(2017, 7, 13, 18, 42, 0, 812557), 'description': "A friggin' basketball", 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 71, 'start_time': datetime.datetime(2017, 7, 13, 18, 42, 0, 814230), 'description': "A friggin' baseball", 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 72, 'start_time': datetime.datetime(2017, 7, 13, 18, 42, 0, 814927), 'description': "A friggin' football", 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 70, 'user_id': 71, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 72, 'user_id': 71, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 70, 'user_id': 72, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 70, 'user_id': 71, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 70}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 70}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 72}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 72}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 71}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 71}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 70}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 72}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 71}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 42, 22, 180185), 'user_id': 73, 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 42, 22, 182022), 'user_id': 74, 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 42, 22, 182872), 'user_id': 75, 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 74, 'item_id': 73}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 74, 'item_id': 75}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'user_id': 75, 'item_id': 73}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'user_id': 74, 'item_id': 73}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 73}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 73}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 75}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 75}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 74}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 74}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 73}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 75}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 76, 'start_time': datetime.datetime(2017, 7, 13, 18, 42, 31, 572495), 'description': "A friggin' basketball", 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 77, 'start_time': datetime.datetime(2017, 7, 13, 18, 42, 31, 573974), 'description': "A friggin' baseball", 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 78, 'start_time': datetime.datetime(2017, 7, 13, 18, 42, 31, 574740), 'description': "A friggin' football", 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 77, 'item_id': 76}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 77, 'item_id': 78}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'user_id': 78, 'item_id': 76}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'user_id': 77, 'item_id': 76}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 76}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 76}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 78}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 78}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 77}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 77}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 76}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 78}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 77}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 42, 37, 326032), 'name': 'Basketball', 'description': "A friggin' basketball", 'user_id': 79}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 42, 37, 328110), 'name': 'Baseball', 'description': "A friggin' baseball", 'user_id': 80}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 42, 37, 329302), 'name': 'Football', 'description': "A friggin' football", 'user_id': 81}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 79, 'user_id': 80}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 81, 'user_id': 80}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'item_id': 79, 'user_id': 81}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'item_id': 79, 'user_id': 80}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 79}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 79}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 81}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 81}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 80}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 80}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 79}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 81}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 80}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 43, 25, 615559), 'name': 'Basketball', 'user_id': 82, 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 43, 25, 617298), 'name': 'Baseball', 'user_id': 83, 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 43, 25, 618071), 'name': 'Football', 'user_id': 84, 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 83, 'item_id': 82}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 83, 'item_id': 84}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'user_id': 84, 'item_id': 82}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'user_id': 83, 'item_id': 82}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 82}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 82}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 84}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 84}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 83}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 83}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 82}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 84}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 83}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 82}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 83}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 84}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 49, 30, 544937), 'name': 'Basketball', 'description': "A friggin' basketball", 'user_id': 85}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 49, 30, 546579), 'name': 'Baseball', 'description': "A friggin' baseball", 'user_id': 86}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 49, 30, 547319), 'name': 'Football', 'description': "A friggin' football", 'user_id': 87}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 85, 'user_id': 86, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 87, 'user_id': 86, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 85, 'user_id': 87, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 85, 'user_id': 86, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 85}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 85}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 87}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 87}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 86}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 86}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 85}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 87}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 86}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 49, 51, 55631), 'user_id': 88}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 49, 51, 57102), 'user_id': 89}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 49, 51, 57826), 'user_id': 90}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 89, 'item_id': 88}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 89, 'item_id': 90}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'user_id': 90, 'item_id': 88}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'user_id': 89, 'item_id': 88}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 88}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 88}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 90}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 90}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 89}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 89}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 88}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 90}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 89}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 50, 0, 434509), 'user_id': 91}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 50, 0, 436212), 'user_id': 92}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 50, 0, 437022), 'user_id': 93}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 91, 'price': 5, 'user_id': 92}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 93, 'price': 5, 'user_id': 92}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 91, 'price': 6, 'user_id': 93}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 91, 'price': 7, 'user_id': 92}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 91}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 91}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 93}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 93}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 92}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 92}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 91}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 93}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 92}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 50, 33, 767119), 'user_id': 94}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 50, 33, 769011), 'user_id': 95}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 50, 33, 770048), 'user_id': 96}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 94, 'user_id': 95, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 96, 'user_id': 95, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 94, 'user_id': 96, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 94, 'user_id': 95, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 94}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 94}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 96}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 96}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 95}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 95}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 94}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 96}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 95}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 97, 'start_time': datetime.datetime(2017, 7, 13, 18, 51, 26, 942652), 'name': 'Basketball', 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 98, 'start_time': datetime.datetime(2017, 7, 13, 18, 51, 26, 944233), 'name': 'Baseball', 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 99, 'start_time': datetime.datetime(2017, 7, 13, 18, 51, 26, 947020), 'name': 'Football', 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 98, 'price': 5, 'item_id': 97}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 98, 'price': 5, 'item_id': 99}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 99, 'price': 6, 'item_id': 97}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 98, 'price': 7, 'item_id': 97}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 97}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 97}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 99}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 99}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 98}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 98}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 97}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 99}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 98}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'user_id': 100, 'start_time': datetime.datetime(2017, 7, 13, 18, 51, 41, 814040), 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'user_id': 101, 'start_time': datetime.datetime(2017, 7, 13, 18, 51, 41, 815601), 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'user_id': 102, 'start_time': datetime.datetime(2017, 7, 13, 18, 51, 41, 816297), 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 100, 'user_id': 101, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 102, 'user_id': 101, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 100, 'user_id': 102, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 100, 'user_id': 101, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 100}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 100}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 102}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 102}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 101}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 101}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 100}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 102}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 101}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 51, 54, 651946), 'user_id': 103}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 51, 54, 653658), 'user_id': 104}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 51, 54, 654586), 'user_id': 105}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 103, 'user_id': 104, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 105, 'user_id': 104, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 103, 'user_id': 105, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 103, 'user_id': 104, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 103}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 103}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 105}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 105}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 104}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 104}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 103}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 105}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 104}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 52, 9, 938978), 'description': "A friggin' basketball", 'user_id': 106, 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 52, 9, 941323), 'description': "A friggin' baseball", 'user_id': 107, 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 52, 9, 942466), 'description': "A friggin' football", 'user_id': 108, 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 106, 'user_id': 107, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 108, 'user_id': 107, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 106, 'user_id': 108, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 106, 'user_id': 107, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 106}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 106}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 108}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 108}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 107}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 107}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 106}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 108}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 107}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 109, 'description': "A friggin' basketball", 'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 52, 15, 794842)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 110, 'description': "A friggin' baseball", 'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 52, 15, 797589)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 111, 'description': "A friggin' football", 'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 52, 15, 798480)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 110, 'price': 5, 'item_id': 109}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 110, 'price': 5, 'item_id': 111}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 111, 'price': 6, 'item_id': 109}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 110, 'price': 7, 'item_id': 109}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 109}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 109}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 111}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 111}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 110}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 110}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 109}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 111}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 110}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'user_id': 112, 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 52, 23, 448911)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'user_id': 113, 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 52, 23, 450978)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'user_id': 114, 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 52, 23, 451850)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 113, 'item_id': 112, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 113, 'item_id': 114, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 114, 'item_id': 112, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 113, 'item_id': 112, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 112}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 112}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 114}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 114}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 113}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 113}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 112}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 114}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 113}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 52, 41, 58915), 'user_id': 115, 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 52, 41, 60525), 'user_id': 116, 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 52, 41, 61241), 'user_id': 117, 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 115, 'price': 5, 'user_id': 116}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 117, 'price': 5, 'user_id': 116}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 115, 'price': 6, 'user_id': 117}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 115, 'price': 7, 'user_id': 116}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 115}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 115}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 117}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 117}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 116}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 116}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 115}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 117}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 116}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 52, 48, 453539), 'user_id': 118, 'name': 'Basketball', 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 52, 48, 455846), 'user_id': 119, 'name': 'Baseball', 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 52, 48, 456800), 'user_id': 120, 'name': 'Football', 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 119, 'item_id': 118, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 119, 'item_id': 120, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 120, 'item_id': 118, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 119, 'item_id': 118, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 118}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 118}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 120}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 120}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 119}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 119}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 118}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 120}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 119}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 121, 'name': 'Basketball', 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 53, 17, 971112)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 122, 'name': 'Baseball', 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 53, 17, 972850)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 123, 'name': 'Football', 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 53, 17, 973551)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 121, 'user_id': 122, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 123, 'user_id': 122, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 121, 'user_id': 123, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 121, 'user_id': 122, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 121}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 121}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 123}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 123}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 122}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 122}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 121}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 123}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 122}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 53, 28, 324996), 'name': 'Basketball', 'user_id': 124, 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 53, 28, 327428), 'name': 'Baseball', 'user_id': 125, 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 53, 28, 328842), 'name': 'Football', 'user_id': 126, 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 125, 'item_id': 124, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 125, 'item_id': 126, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 126, 'item_id': 124, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 125, 'item_id': 124, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 124}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 124}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 126}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 126}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 125}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 125}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 124}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 126}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 125}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 53, 35, 757457), 'description': "A friggin' basketball", 'name': 'Basketball', 'user_id': 127}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 53, 35, 759046), 'description': "A friggin' baseball", 'name': 'Baseball', 'user_id': 128}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 53, 35, 759974), 'description': "A friggin' football", 'name': 'Football', 'user_id': 129}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 127, 'price': 5, 'user_id': 128}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 129, 'price': 5, 'user_id': 128}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 127, 'price': 6, 'user_id': 129}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 127, 'price': 7, 'user_id': 128}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 127}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 127}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 129}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 129}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 128}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 128}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 127}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 129}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 128}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'user_id': 130, 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 53, 44, 104839)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'user_id': 131, 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 53, 44, 106698)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'user_id': 132, 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 53, 44, 107442)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 131, 'price': 5, 'item_id': 130}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 131, 'price': 5, 'item_id': 132}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 132, 'price': 6, 'item_id': 130}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 131, 'price': 7, 'item_id': 130}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 130}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 130}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 132}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 132}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 131}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 131}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 130}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 132}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 131}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 133, 'description': "A friggin' basketball", 'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 54, 0, 821922)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 134, 'description': "A friggin' baseball", 'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 54, 0, 823662)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 135, 'description': "A friggin' football", 'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 54, 0, 824387)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 134, 'price': 5, 'item_id': 133}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 134, 'price': 5, 'item_id': 135}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 135, 'price': 6, 'item_id': 133}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 134, 'price': 7, 'item_id': 133}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 133}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 133}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 135}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 135}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 134}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 134}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 133}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 135}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 134}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 54, 33, 126413), 'description': "A friggin' basketball", 'user_id': 136, 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 54, 33, 128142), 'description': "A friggin' baseball", 'user_id': 137, 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 54, 33, 128886), 'description': "A friggin' football", 'user_id': 138, 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 136, 'user_id': 137}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 138, 'user_id': 137}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'item_id': 136, 'user_id': 138}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'item_id': 136, 'user_id': 137}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 136}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 136}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 138}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 138}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 137}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 137}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 136}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 138}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 137}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 54, 50, 439287), 'name': 'Basketball', 'description': "A friggin' basketball", 'user_id': 139}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 54, 50, 441321), 'name': 'Baseball', 'description': "A friggin' baseball", 'user_id': 140}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 54, 50, 442095), 'name': 'Football', 'description': "A friggin' football", 'user_id': 141}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 140, 'price': 5, 'item_id': 139}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 140, 'price': 5, 'item_id': 141}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 141, 'price': 6, 'item_id': 139}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 140, 'price': 7, 'item_id': 139}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 139}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 139}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 141}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 141}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 140}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 140}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 139}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 141}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 140}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 142, 'name': 'Basketball', 'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 18, 55, 0, 425434)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 143, 'name': 'Baseball', 'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 18, 55, 0, 427046)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 144, 'name': 'Football', 'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 18, 55, 0, 427779)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 143, 'item_id': 142, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 143, 'item_id': 144, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 144, 'item_id': 142, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 143, 'item_id': 142, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 142}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 142}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 144}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 144}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 143}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 143}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 142}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 144}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 143}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 142}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 143}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 144}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'name': 'Basketball', 'user_id': 145, 'start_time': datetime.datetime(2017, 7, 13, 18, 55, 29, 831812)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'name': 'Baseball', 'user_id': 146, 'start_time': datetime.datetime(2017, 7, 13, 18, 55, 29, 833757)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'name': 'Football', 'user_id': 147, 'start_time': datetime.datetime(2017, 7, 13, 18, 55, 29, 834498)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 145, 'user_id': 146, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 147, 'user_id': 146, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 145, 'user_id': 147, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 145, 'user_id': 146, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 145}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 145}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 147}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 147}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 146}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 146}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 145}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 147}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 146}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 145}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'name': 'Basketball', 'user_id': 148, 'start_time': datetime.datetime(2017, 7, 13, 18, 55, 38, 54629)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'name': 'Baseball', 'user_id': 149, 'start_time': datetime.datetime(2017, 7, 13, 18, 55, 38, 56810)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'name': 'Football', 'user_id': 150, 'start_time': datetime.datetime(2017, 7, 13, 18, 55, 38, 57585)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 149, 'item_id': 148}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 149, 'item_id': 150}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'user_id': 150, 'item_id': 148}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'user_id': 149, 'item_id': 148}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 148}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 148}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 150}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 150}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 149}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 149}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 148}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 150}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 149}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 148}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 149}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 150}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 151, 'start_time': datetime.datetime(2017, 7, 13, 18, 56, 5, 450180), 'name': 'Basketball', 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 152, 'start_time': datetime.datetime(2017, 7, 13, 18, 56, 5, 452190), 'name': 'Baseball', 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 153, 'start_time': datetime.datetime(2017, 7, 13, 18, 56, 5, 452972), 'name': 'Football', 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 152, 'item_id': 151, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 152, 'item_id': 153, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 153, 'item_id': 151, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 152, 'item_id': 151, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 151}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 151}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 153}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 153}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 152}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 152}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 151}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 153}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 152}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 151}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 152}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 153}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 18, 56, 55, 262106), 'user_id': 154, 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 18, 56, 55, 263601), 'user_id': 155, 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 18, 56, 55, 264289), 'user_id': 156, 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 154, 'price': 5, 'user_id': 155}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 156, 'price': 5, 'user_id': 155}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 154, 'price': 6, 'user_id': 156}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 154, 'price': 7, 'user_id': 155}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 154}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 154}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 156}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 156}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 155}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 155}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 154}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 156}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 155}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 154}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 155}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 156}
SELECT items.id AS items_id, items.description AS items_description 
FROM items 
WHERE items.name = %(name_1)s
{'name_1': 'Baseball'}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) initialize prop users
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 58, 0, 633726), 'user_id': 157, 'name': 'Basketball', 'description': "A friggin' basketball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 58, 0, 636945), 'user_id': 158, 'name': 'Baseball', 'description': "A friggin' baseball"}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'start_time': datetime.datetime(2017, 7, 13, 18, 58, 0, 638402), 'user_id': 159, 'name': 'Football', 'description': "A friggin' football"}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 158, 'price': 5, 'item_id': 157}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 158, 'price': 5, 'item_id': 159}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 159, 'price': 6, 'item_id': 157}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 158, 'price': 7, 'item_id': 157}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 157}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 157}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 159}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 159}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 158}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 158}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 157}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 159}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 158}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 157}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 158}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 159}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'name': 'Basketball', 'user_id': 160, 'start_time': datetime.datetime(2017, 7, 13, 18, 58, 24, 246159)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'name': 'Baseball', 'user_id': 161, 'start_time': datetime.datetime(2017, 7, 13, 18, 58, 24, 247874)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'name': 'Football', 'user_id': 162, 'start_time': datetime.datetime(2017, 7, 13, 18, 58, 24, 248630)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 161, 'item_id': 160, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 161, 'item_id': 162, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 162, 'item_id': 160, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 161, 'item_id': 160, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 160}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 160}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 162}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 162}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 161}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 161}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 160}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 162}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 161}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 160}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 161}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 162}
SELECT users.username AS users_username 
FROM users ORDER BY bids.price 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY bids.price 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY bids.price 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY bids.price
{}
SELECT users.username AS users_username 
FROM users ORDER BY bids.price
{}
SELECT users.username AS users_username 
FROM users
{}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users
{}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 1}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users
{}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'user_id': 163, 'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 19, 30, 33, 129125)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'user_id': 164, 'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 19, 30, 33, 130856)}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'user_id': 165, 'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 19, 30, 33, 131593)}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 164, 'item_id': 163, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 164, 'item_id': 165, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 165, 'item_id': 163, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 164, 'item_id': 163, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 163}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 163}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 165}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 165}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 164}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 164}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 163}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 165}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 164}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 163}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 164}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 165}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users
{}
SELECT users.username AS users_username 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY bids.price 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY bids.price
{}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 166, 'start_time': datetime.datetime(2017, 7, 13, 19, 32, 54, 722211), 'description': "A friggin' basketball", 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 167, 'start_time': datetime.datetime(2017, 7, 13, 19, 32, 54, 724383), 'description': "A friggin' baseball", 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'user_id': 168, 'start_time': datetime.datetime(2017, 7, 13, 19, 32, 54, 725255), 'description': "A friggin' football", 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 167, 'price': 5, 'item_id': 166}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 167, 'price': 5, 'item_id': 168}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 168, 'price': 6, 'item_id': 166}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'user_id': 167, 'price': 7, 'item_id': 166}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 166}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 166}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 168}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 168}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 167}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 167}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 166}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 168}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 167}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 166}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 167}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 168}
SELECT users.username AS users_username 
FROM users
{}
SELECT users.username AS users_username 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY users.username 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY users.username
{}
SELECT users.username AS users_username 
FROM users ORDER BY users.username 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY users.id = bids.user_id 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY users.id = bids.user_id 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY bids.price 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users ORDER BY users.id = bids.user_id 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 19, 36, 46, 464517), 'name': 'Basketball', 'user_id': 169}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 19, 36, 46, 466128), 'name': 'Baseball', 'user_id': 170}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 19, 36, 46, 466831), 'name': 'Football', 'user_id': 171}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 169, 'user_id': 170}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'item_id': 171, 'user_id': 170}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'item_id': 169, 'user_id': 171}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'item_id': 169, 'user_id': 170}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 169}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 169}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 171}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 171}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 170}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 170}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 169}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 171}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 170}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 169}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 170}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 171}
SELECT users.username AS users_username 
FROM users 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, bids.price AS bids_price 
FROM users, bids 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, bids.price AS bids_price 
FROM users, bids 
WHERE bids.user_id = %(user_id_1)s 
 LIMIT %(param_1)s
{'user_id_1': 170, 'param_1': 1}
SELECT users.username AS users_username, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id ORDER BY bids.price 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id ORDER BY bids.price DESC 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users JOIN bids ON users.id = bids.user_id ORDER BY bids.price DESC 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users JOIN bids ON users.id = bids.user_id ORDER BY bids.price DESC 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id ORDER BY bids.price DESC 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, bids.item_id AS bids_item_id, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id ORDER BY bids.price DESC 
 LIMIT %(param_1)s
{'param_1': 1}
SELECT users.username AS users_username, items.name AS items_name, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id JOIN items ON items.id = bids.item_id ORDER BY bids.price DESC 
 LIMIT %(param_1)s
{'param_1': 1}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) initialize prop users
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop users
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
BEGIN (implicit)
SELECT users.username AS users_username, items.name AS items_name, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id JOIN items ON items.id = bids.item_id ORDER BY bids.price DESC 
 LIMIT %(param_1)s
{'param_1': 1}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'badpassword', 'username': 'Steve'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'bingbong', 'username': 'Tom'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'password': 'frankface', 'username': 'Frank'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'name': 'Basketball', 'start_time': datetime.datetime(2017, 7, 13, 19, 48, 25, 906200), 'user_id': 172}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'name': 'Baseball', 'start_time': datetime.datetime(2017, 7, 13, 19, 48, 25, 907591), 'user_id': 173}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'name': 'Football', 'start_time': datetime.datetime(2017, 7, 13, 19, 48, 25, 908916), 'user_id': 174}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 172, 'user_id': 173, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 174, 'user_id': 173, 'price': 5}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 172, 'user_id': 174, 'price': 6}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'item_id': 172, 'user_id': 173, 'price': 7}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 172}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 172}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 174}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 174}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 173}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 173}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 172}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 174}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 173}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 172}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 173}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 174}
SELECT users.username AS users_username, items.name AS items_name, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id JOIN items ON items.id = bids.item_id ORDER BY bids.price DESC 
 LIMIT %(param_1)s
{'param_1': 1}
(User|users) _configure_property(items, RelationshipProperty)
(User|users) _configure_property(bids, RelationshipProperty)
(User|users) _configure_property(id, Column)
(User|users) _configure_property(username, Column)
(User|users) _configure_property(password, Column)
(User|users) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<users>, primary_key=True, nullable=False)])
(User|users) constructed
(Item|items) _configure_property(bids, RelationshipProperty)
(Item|items) _configure_property(id, Column)
(Item|items) _configure_property(name, Column)
(Item|items) _configure_property(description, Column)
(Item|items) _configure_property(start_time, Column)
(Item|items) _configure_property(user_id, Column)
(Item|items) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<items>, primary_key=True, nullable=False)])
(Item|items) constructed
(Bid|bids) _configure_property(id, Column)
(Bid|bids) _configure_property(price, Column)
(Bid|bids) _configure_property(user_id, Column)
(Bid|bids) _configure_property(item_id, Column)
(Bid|bids) Identified primary key columns: ColumnSet([Column('id', Integer(), table=<bids>, primary_key=True, nullable=False)])
(Bid|bids) constructed
select version()
{}
select current_schema()
{}
SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
{}
SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
{}
show standard_conforming_strings
{}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'users'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'items'}
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': 'bids'}
(Item|items) _post_configure_properties() started
(Item|items) initialize prop bids
Item.bids setup primary join items.id = bids.item_id
Item.bids setup secondary join None
Item.bids synchronize pairs [(items.id => bids.item_id)]
Item.bids secondary synchronize pairs []
Item.bids local/remote pairs [(items.id / bids.item_id)]
Item.bids remote columns [bids.item_id]
Item.bids local columns [items.id]
Item.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(items, RelationshipProperty)
Bid.items setup primary join items.id = bids.item_id
Bid.items setup secondary join None
Bid.items synchronize pairs [(items.id => bids.item_id)]
Bid.items secondary synchronize pairs []
Bid.items local/remote pairs [(bids.item_id / items.id)]
Bid.items remote columns [items.id]
Bid.items local columns [bids.item_id]
Bid.items relationship direction symbol('MANYTOONE')
Bid.items lazy loading clause items.id = :param_1
Bid.items will use query.get() to optimize instance loads
Item.bids lazy loading clause :param_1 = bids.item_id
(Item|items) initialize prop id
(Item|items) initialize prop name
(Item|items) initialize prop description
(Item|items) initialize prop start_time
(Item|items) initialize prop user_id
(Item|items) _post_configure_properties() complete
(Bid|bids) _post_configure_properties() started
(Bid|bids) initialize prop id
(Bid|bids) initialize prop price
(Bid|bids) initialize prop user_id
(Bid|bids) initialize prop item_id
(Bid|bids) initialize prop items
(Bid|bids) _post_configure_properties() complete
(User|users) _post_configure_properties() started
(User|users) initialize prop items
User.items setup primary join users.id = items.user_id
User.items setup secondary join None
User.items synchronize pairs [(users.id => items.user_id)]
User.items secondary synchronize pairs []
User.items local/remote pairs [(users.id / items.user_id)]
User.items remote columns [items.user_id]
User.items local columns [users.id]
User.items relationship direction symbol('ONETOMANY')
(Item|items) _configure_property(users, RelationshipProperty)
Item.users setup primary join users.id = items.user_id
Item.users setup secondary join None
Item.users synchronize pairs [(users.id => items.user_id)]
Item.users secondary synchronize pairs []
Item.users local/remote pairs [(items.user_id / users.id)]
Item.users remote columns [users.id]
Item.users local columns [items.user_id]
Item.users relationship direction symbol('MANYTOONE')
Item.users lazy loading clause users.id = :param_1
Item.users will use query.get() to optimize instance loads
User.items lazy loading clause :param_1 = items.user_id
(User|users) initialize prop bids
User.bids setup primary join users.id = bids.user_id
User.bids setup secondary join None
User.bids synchronize pairs [(users.id => bids.user_id)]
User.bids secondary synchronize pairs []
User.bids local/remote pairs [(users.id / bids.user_id)]
User.bids remote columns [bids.user_id]
User.bids local columns [users.id]
User.bids relationship direction symbol('ONETOMANY')
(Bid|bids) _configure_property(users, RelationshipProperty)
Bid.users setup primary join users.id = bids.user_id
Bid.users setup secondary join None
Bid.users synchronize pairs [(users.id => bids.user_id)]
Bid.users secondary synchronize pairs []
Bid.users local/remote pairs [(bids.user_id / users.id)]
Bid.users remote columns [users.id]
Bid.users local columns [bids.user_id]
Bid.users relationship direction symbol('MANYTOONE')
Bid.users lazy loading clause users.id = :param_1
Bid.users will use query.get() to optimize instance loads
User.bids lazy loading clause :param_1 = bids.user_id
(User|users) initialize prop id
(User|users) initialize prop username
(User|users) initialize prop password
(User|users) _post_configure_properties() complete
BEGIN (implicit)
SELECT users.username AS users_username, items.name AS items_name, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id JOIN items ON items.id = bids.item_id ORDER BY bids.price DESC 
 LIMIT %(param_1)s
{'param_1': 1}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Steve', 'password': 'badpassword'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Tom', 'password': 'bingbong'}
INSERT INTO users (username, password) VALUES (%(username)s, %(password)s) RETURNING users.id
{'username': 'Frank', 'password': 'frankface'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' basketball", 'start_time': datetime.datetime(2017, 7, 13, 19, 48, 34, 54402), 'user_id': 175, 'name': 'Basketball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' baseball", 'start_time': datetime.datetime(2017, 7, 13, 19, 48, 34, 56031), 'user_id': 176, 'name': 'Baseball'}
INSERT INTO items (name, description, start_time, user_id) VALUES (%(name)s, %(description)s, %(start_time)s, %(user_id)s) RETURNING items.id
{'description': "A friggin' football", 'start_time': datetime.datetime(2017, 7, 13, 19, 48, 34, 56778), 'user_id': 177, 'name': 'Football'}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 176, 'item_id': 175}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 5, 'user_id': 176, 'item_id': 177}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 6, 'user_id': 177, 'item_id': 175}
INSERT INTO bids (price, user_id, item_id) VALUES (%(price)s, %(user_id)s, %(item_id)s) RETURNING bids.id
{'price': 7, 'user_id': 176, 'item_id': 175}
COMMIT
BEGIN (implicit)
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 175}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 175}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 177}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 177}
SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
FROM users 
WHERE users.id = %(param_1)s
{'param_1': 176}
SELECT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.start_time AS items_start_time, items.user_id AS items_user_id 
FROM items 
WHERE %(param_1)s = items.user_id
{'param_1': 176}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 175}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 177}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.user_id
{'param_1': 176}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 175}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 176}
SELECT bids.id AS bids_id, bids.price AS bids_price, bids.user_id AS bids_user_id, bids.item_id AS bids_item_id 
FROM bids 
WHERE %(param_1)s = bids.item_id
{'param_1': 177}
SELECT users.username AS users_username, items.name AS items_name, bids.price AS bids_price 
FROM users JOIN bids ON users.id = bids.user_id JOIN items ON items.id = bids.item_id ORDER BY bids.price DESC 
 LIMIT %(param_1)s
{'param_1': 1}
